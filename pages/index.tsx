import Head from 'next/head';
import Stack from '@layouts/Stack';
import UserList, { UserListButtons } from '@modules/UserList';
import { ChangeEventHandler, useCallback } from 'react';
import classNames from 'classnames';
import { useDebouncedCallback } from 'use-debounce';
import { useWindowEvent } from '@hooks/useWindowEvent';
import { useUserListPaginationStore } from '../contexts/UserListPaginationContext';
import Hint from '@components/Hint';

// https://stackoverflow.com/questions/11867545/change-text-color-based-on-brightness-of-the-covered-background-area
function getContrastYIQ(hexColor: string) {
    const hex = hexColor.replace('#', '');
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    const yiq = (r * 299 + g * 587 + b * 114) / 1000;
    return yiq >= 128;
}

const syncFromLocalStorage = () => {
    const bg = localStorage.getItem('carBgColor');
    const text = localStorage.getItem('carTextColor');
    const r = document.querySelector(':root') as HTMLElement;
    if (r) r.style.setProperty('--card-bg-color', bg);
    r.style.setProperty('--card-text-color', text);
};

if (typeof window !== 'undefined') {
    syncFromLocalStorage();
}

const useKeyboardPagination = () => {
    useWindowEvent('keydown', (e) => {
        if (e.key === 'ArrowRight') {
            useUserListPaginationStore.getState().nextPage();
        }
        if (e.key === 'ArrowLeft') {
            useUserListPaginationStore.getState().prevPage();
        }
    });
};

const HomeContent = () => {
    useKeyboardPagination();

    const syncToLocalStorage = useDebouncedCallback(
        ({ carTextColor, carBgColor }: { carBgColor: string; carTextColor: string }) => {
            localStorage.setItem('carBgColor', carBgColor);
            localStorage.setItem('carTextColor', carTextColor);
        },
        100,
    );

    const handleColorChange = useCallback<ChangeEventHandler<HTMLInputElement>>(
        (e) => {
            const r = document.querySelector(':root') as HTMLElement;
            if (r) r.style.setProperty('--card-bg-color', e.target.value);

            const textColor = getContrastYIQ(e.target.value) ? '#000' : '#fff';
            r.style.setProperty('--card-text-color', textColor);
            syncToLocalStorage({
                carBgColor: e.target.value,
                carTextColor: textColor,
            });
        },
        [syncToLocalStorage],
    );

    return (
        <Stack direction={'column'} alignItems={'center'}>
            <div
                className={classNames('h-flex align-center')}
                style={{
                    gap: '0.5rem',
                    padding: '1rem 0',
                }}
            >
                <label htmlFor={'color_picker'}>Card background color:</label>
                <input id={'color_picker'} type={'color'} onChange={handleColorChange} />
            </div>

            <UserList />
            <UserListButtons />
        </Stack>
    );
};

export default function Home() {
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <HomeContent />
            <Hint />
        </>
    );
}
