import Head from 'next/head';
import Stack from '@layouts/Stack';
import UserList, { UserListButtons } from '@modules/UserList';
import { ChangeEventHandler, useCallback } from 'react';
import classNames from 'classnames';
import { useDebouncedCallback } from 'use-debounce';
import { useWindowEvent } from '@hooks/useWindowEvent';
import { useUserListPaginationStore } from '../contexts/UserListPaginationContext';
import Hint from '@components/Hint';

// https://stackoverflow.com/questions/11867545/change-text-color-based-on-brightness-of-the-covered-background-area
function rgbObjToStr({ r, g, b }: { r: number; g: number; b: number }) {
    return `${r},${g},${b}`;
}

function hexToRgb(hex: string) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    if (result)
        return {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
        };
    return {
        r: 0,
        g: 0,
        b: 0,
    };
}

function getContrastYIQ(hexColor: string) {
    const { r, g, b } = hexToRgb(hexColor);
    const yiq = (r * 299 + g * 587 + b * 114) / 1000;
    return yiq >= 128;
}

const syncFromLocalStorage = () => {
    const bg = localStorage.getItem('carBgColor');
    const text = localStorage.getItem('carTextColor');
    const r = document.querySelector(':root') as HTMLElement;
    if (r) r.style.setProperty('--card-bg-color', bg);
    r.style.setProperty('--card-text-color', text);
};

if (typeof window !== 'undefined') {
    syncFromLocalStorage();
}

const useKeyboardPagination = () => {
    useWindowEvent('keydown', (e) => {
        if (e.key === 'ArrowRight') {
            useUserListPaginationStore.getState().nextPage();
        }
        if (e.key === 'ArrowLeft') {
            useUserListPaginationStore.getState().prevPage();
        }
    });
};

const HomeContent = () => {
    useKeyboardPagination();

    const syncToLocalStorage = useDebouncedCallback(
        ({ carTextColor, carBgColor }: { carBgColor: string; carTextColor: string }) => {
            localStorage.setItem('carBgColor', carBgColor);
            localStorage.setItem('carTextColor', carTextColor);
        },
        100,
    );

    const handleColorChange = useCallback<ChangeEventHandler<HTMLInputElement>>(
        (e) => {
            const r = document.querySelector(':root') as HTMLElement;
            const carBgColor = rgbObjToStr(hexToRgb(e.target.value));
            if (r) r.style.setProperty('--card-bg-color', carBgColor);

            const textColor = getContrastYIQ(e.target.value) ? '0,0,0' : '255,255,255';
            r.style.setProperty('--card-text-color', textColor);
            syncToLocalStorage({
                carBgColor,
                carTextColor: textColor,
            });
        },
        [syncToLocalStorage],
    );

    return (
        <Stack direction={'column'} alignItems={'center'}>
            <div
                className={classNames('h-flex align-center')}
                style={{
                    gap: '0.5rem',
                    padding: '1rem 0',
                }}
            >
                <label htmlFor={'color_picker'}>Card background color:</label>
                <input id={'color_picker'} type={'color'} onChange={handleColorChange} />
            </div>

            <UserList />
            <UserListButtons />
        </Stack>
    );
};

export default function Home() {
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <HomeContent />
            <Hint />
        </>
    );
}
